name: Solar System Workflow

on:
    workflow_dispatch: 
    push: 
        branches: 
            - main
            - 'feature/*'
env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
    unit-testing:
        name: Unit Testing
        
        strategy:
          matrix:
            nodejs_version: [18,20]
            os: [ubuntu-latest]
            exclude:
              - nodejs_version: 18
                os: macos-latest
        runs-on: ${{matrix.os}}
        steps:
            - name: Checkout Repo
              uses: actions/checkout@v4

            - name: Setup NodeJS version - ${{matrix.nodejs_version}}
              uses: actions/setup-node@v3
              with:
                node-version:  ${{matrix.nodejs_version}}
            - name: Cache NPM Dependencies
              uses: actions/cache@v3
              with:
                path: node_modules
                key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}}

            - name: Install Dependencies
              run: npm install

            - name: Unit Testing
              id: nodejs-unit-testing-step
              run: npm test 

            - name : Archive test results
              # if: (steps.nodejs-unit-testing-step.outcome == 'failure' || steps.nodejs-unit-testing-step.outcome == 'success') && failure()
              if: always()
              uses: actions/upload-artifact@v3
              with:
                name: Mocha-Test-Result
                path: test-results.xml

    code-coverage:
      name: Code Coverage 
      
      strategy:
        matrix:
          nodejs_version: [18]
          os: [ubuntu-latest,macos-latest]
          exclude:
            - nodejs_version: 18
              os: macos-latest
      runs-on: ubuntu-latest
      steps:
          - name: Checkout Repo
            uses: actions/checkout@v4

          - name: Setup NodeJS version - ${{matrix.nodejs_version}}
            uses: actions/setup-node@v3
            with:
              node-version: ${{matrix.nodejs_version}}

          - name: Cache NPM Dependencies
            uses: actions/cache@v3
            with:
                path: node_modules
                key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}}
          
          - name: Install Dependencies
            run: npm install

          - name: Check code coverage
            continue-on-error: true
            run: npm run coverage

          - name : Archive code coverage results
            uses: actions/upload-artifact@v3
            with:
              name: Code-Coverage-results
              path: coverage
              retention-days: 5
    
    Login-Docker:    
      name: Login to Docker
      runs-on: ubuntu-latest
      needs: [unit-testing, code-coverage]
      steps:

        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Docker Credentials
          uses: docker/login-action@v3
          with:
           username: ${{ vars.DOCKERHUB_USERNAME }}
           password: ${{ secrets.DOCKERHUB_PASSWORD }}
        
        - name: Docker build for testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}
        
        - name: Docker Image Test
          run: |
            docker images
            docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live

        - name: Docker Push to DockerHub
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}